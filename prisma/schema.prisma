generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OrganizationType {
  id            String         @id @unique @default(uuid()) @db.Uuid
  name          String         @map("name") @db.VarChar(255)
  description   String?        @map("description")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt     DateTime?      @map("deleted_at") @db.Timestamptz(6)
  organizations Organization[] @relation("OrganizationType")

  @@map("organization_types")
}

model Department {
  id        String                @id @unique @default(uuid()) @db.Uuid
  name      String                @map("name") @db.VarChar(255)
  createdAt DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime              @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime?             @map("deleted_at") @db.Timestamptz(6)
  managers  OrganizationManager[] @relation("DepartmentManager")

  @@map("departments")
}

model Role {
  id        String    @id @unique @default(uuid()) @db.Uuid
  name      String    @map("name") @db.VarChar(255)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  accounts  Account[] @relation("AccountRole")

  @@map("roles")
}

model VerificationCodes {
  id        String    @id @unique @default(uuid()) @db.Uuid
  code      String    @map("code") @db.VarChar(255)
  expiresAt DateTime  @map("expires_at") @db.Timestamptz(6)
  accountId String    @map("account_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  account   Account   @relation("AccountVerification", fields: [accountId], references: [id])

  @@map("verification_codes")
}

model Organization {
  id                     String                @id @unique @default(uuid()) @db.Uuid
  typeId                 String                @map("type_id") @db.Uuid
  addressId              String                @map("address_id") @db.Uuid
  name                   String                @map("name") @db.VarChar(255)
  website                String?               @map("website") @db.VarChar(255)
  isAuthorized           Boolean               @default(false) @map("is_authorized")
  dataSharingConsent     Boolean               @default(false) @map("data_sharing_consent")
  agreeToTermsAndPrivacy Boolean               @default(false) @map("agree_to_terms_and_privacy")
  status                 OrganizationStatus    @default(PENDING) @map("status")
  approvedBy             String?               @map("approved_by") @db.Uuid
  approvedAt             DateTime?             @map("approved_at") @db.Timestamptz(6)
  rejectedBy             String?               @map("rejected_by") @db.Uuid
  rejectedAt             DateTime?             @map("rejected_at") @db.Timestamptz(6)
  rejectedReason         String?               @map("rejected_reason")
  createdAt              DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime              @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt              DateTime?             @map("deleted_at") @db.Timestamptz(6)
  referrals              IMEReferral[]         @relation("OrganizationReferrals")
  manager                OrganizationManager[] @relation("OrganizationManager")
  address                Address               @relation("Address", fields: [addressId], references: [id])
  type                   OrganizationType      @relation("OrganizationType", fields: [typeId], references: [id])

  @@map("organizations")
}

model OrganizationManager {
  id             String       @id @unique @default(uuid()) @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  accountId      String       @map("account_id") @db.Uuid
  jobTitle       String?      @map("job_title") @db.VarChar(255)
  departmentId   String?      @map("department_id") @db.Uuid
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt      DateTime?    @map("deleted_at") @db.Timestamptz(6)
  account        Account      @relation("AccountManager", fields: [accountId], references: [id])
  department     Department?  @relation("DepartmentManager", fields: [departmentId], references: [id])
  organization   Organization @relation("OrganizationManager", fields: [organizationId], references: [id])

  @@map("organization_managers")
}

model User {
  id             String     @id @unique @default(uuid()) @db.Uuid
  firstName      String     @map("first_name") @db.VarChar(255)
  lastName       String     @map("last_name") @db.VarChar(255)
  email          String     @unique @map("email") @db.VarChar(255)
  password       String     @map("password") @db.VarChar(255)
  phone          String?    @map("phone") @db.VarChar(255)
  gender         String?    @map("gender") @db.VarChar(255)
  dateOfBirth    DateTime?  @map("date_of_birth") @db.Timestamptz(6)
  profilePhotoId String?    @map("profile_photo_id") @db.Uuid
  createdAt      DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt      DateTime?  @map("deleted_at") @db.Timestamptz(6)
  accounts       Account[]  @relation("AccountUser")
  profilePhoto   Documents? @relation("ProfilePhoto", fields: [profilePhotoId], references: [id])

  @@map("users")
}

model Account {
  id                String                @id @unique @default(uuid()) @db.Uuid
  roleId            String                @map("role_id") @db.Uuid
  userId            String                @map("user_id") @db.Uuid
  isVerified        Boolean               @default(false) @map("is_verified")
  createdAt         DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime              @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt         DateTime?             @map("deleted_at") @db.Timestamptz(6)
  role              Role                  @relation("AccountRole", fields: [roleId], references: [id])
  user              User                  @relation("AccountUser", fields: [userId], references: [id])
  assignedCases     Case[]                @relation("AssignedCases")
  cases             Case[]                @relation("ExaminerCases")
  managers          OrganizationManager[] @relation("AccountManager")
  verificationCodes VerificationCodes[]   @relation("AccountVerification")

  @@map("accounts")
}

model Address {
  id                            String                          @id @unique @default(uuid()) @db.Uuid
  address                       String                          @map("address")
  street                        String                          @map("street") @db.VarChar(255)
  province                      String                          @map("province") @db.VarChar(255)
  city                          String                          @map("city") @db.VarChar(255)
  postalCode                    String                          @map("postal_code") @db.VarChar(255)
  suite                         String                          @map("suite") @db.VarChar(255)
  createdAt                     DateTime                        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                     DateTime                        @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt                     DateTime?                       @map("deleted_at") @db.Timestamptz(6)
  claimantAvailabilityTransport ClaimantAvailabilityTransport[] @relation("ClaimantAvailabilityTransport")
  claimants                     Claimant[]                      @relation("ClaimantAddress")
  organizations                 Organization[]                  @relation("Address")

  @@map("addresses")
}

model Claimant {
  id                   String                 @id @unique @default(uuid()) @db.Uuid
  firstName            String                 @map("first_name") @db.VarChar(255)
  lastName             String                 @map("last_name") @db.VarChar(255)
  dateOfBirth          DateTime               @map("date_of_birth") @db.Date
  gender               String                 @map("gender") @db.VarChar(50)
  phoneNumber          String                 @map("phone_number") @db.VarChar(255)
  emailAddress         String                 @map("email_address") @db.VarChar(255)
  addressId            String                 @map("address_id") @db.Uuid
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime               @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt            DateTime?              @map("deleted_at") @db.Timestamptz(6)
  claimantAvailability ClaimantAvailability[] @relation("ClaimantAvailability")
  address              Address                @relation("ClaimantAddress", fields: [addressId], references: [id])
  referrals            IMEReferral[]          @relation("ClaimantReferrals")

  @@map("claimants")
}

model IMEReferral {
  id                   String        @id @unique @default(uuid()) @db.Uuid
  caseNumber           String        @map("case_number") @db.VarChar(255)
  organizationId       String?       @map("organization_id") @db.Uuid
  claimantId           String        @map("claimant_id") @db.Uuid
  createdAt            DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt            DateTime?     @map("deleted_at") @db.Timestamptz(6)
  consentForSubmission Boolean       @default(false) @map("consent_for_submission")
  isDraft              Boolean       @default(false) @map("is_draft")
  cases                Case[]        @relation("CaseReferrals")
  claimant             Claimant      @relation("ClaimantReferrals", fields: [claimantId], references: [id])
  organization         Organization? @relation("OrganizationReferrals", fields: [organizationId], references: [id])

  @@map("ime_referrals")
}

model Case {
  id                   String                 @id @unique @default(uuid()) @db.Uuid
  referralId           String                 @map("referral_id") @db.Uuid
  caseTypeId           String                 @map("case_type_id") @db.Uuid
  examFormatId         String                 @map("exam_format_id") @db.Uuid
  requestedSpecialtyId String                 @map("requested_specialty_id") @db.Uuid
  preferredLocation    String?                @map("preferred_location") @db.VarChar(255)
  urgencyLevel         UrgencyLevel           @map("urgency_level")
  reason               String                 @map("reason")
  examinerId           String?                @map("examiner_id") @db.Uuid
  statusId             String                 @map("status_id") @db.Uuid
  assignToId           String?                @map("assign_to_id") @db.Uuid
  assignedAt           DateTime?              @map("assigned_at") @db.Timestamptz(6)
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime               @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt            DateTime?              @map("deleted_at") @db.Timestamptz(6)
  documents            CaseDocument[]         @relation("CaseDocuments")
  secureLinks          CaseSecureLink[]       @relation("CaseSecureLink")
  assignTo             Account?               @relation("AssignedCases", fields: [assignToId], references: [id])
  caseType             CaseType               @relation("CaseType", fields: [caseTypeId], references: [id])
  examFormat           ExamFormat             @relation("ExamFormat", fields: [examFormatId], references: [id])
  examiner             Account?               @relation("ExaminerCases", fields: [examinerId], references: [id])
  referral             IMEReferral            @relation("CaseReferrals", fields: [referralId], references: [id])
  requestedSpecialty   RequestedSpecialty     @relation("RequestedSpecialty", fields: [requestedSpecialtyId], references: [id])
  status               CaseStatus             @relation("CaseStatus", fields: [statusId], references: [id])
  claimantAvailability ClaimantAvailability[] @relation("CaseClaimantAvailability")

  @@index([referralId])
  @@map("cases")
}

model CaseSecureLink {
  id           String               @id @unique @default(uuid()) @db.Uuid
  caseId       String               @map("case_id") @db.Uuid
  token        String               @map("token") @db.VarChar(255)
  expiresAt    DateTime             @map("expires_at") @db.Timestamptz(6)
  lastOpenedAt DateTime?            @map("last_opened_at") @db.Timestamptz(6)
  submittedAt  DateTime?            @map("submitted_at") @db.Timestamptz(6)
  status       CaseSecureLinkStatus @default(PENDING) @map("status")
  createdAt    DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime             @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt    DateTime?            @map("deleted_at") @db.Timestamptz(6)
  case         Case                 @relation("CaseSecureLink", fields: [caseId], references: [id])

  @@map("case_secure_links")
}

model ClaimantAvailability {
  id                 String                         @id @unique @default(uuid()) @db.Uuid
  caseId             String                         @map("case_id") @db.Uuid
  claimantId         String                         @map("claimant_id") @db.Uuid
  preference         ClaimantPreference             @map("preference")
  accessibilityNotes String?                        @map("accessibility_notes")
  additionalNotes    String?                        @map("additional_notes")
  consentAck         Boolean                        @default(false) @map("consent_ack")
  createdAt          DateTime                       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime                       @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt          DateTime?                      @map("deleted_at") @db.Timestamptz(6)
  case               Case                           @relation("CaseClaimantAvailability", fields: [caseId], references: [id])
  claimant           Claimant                       @relation("ClaimantAvailability", fields: [claimantId], references: [id])
  services           ClaimantAvailabilityServices[] @relation("ClaimantAvailabilityServices")
  slots              ClaimantAvailabilitySlots[]    @relation("ClaimantAvailabilitySlots")

  @@map("claimant_availability")
}

model ClaimantAvailabilitySlots {
  id             String               @id @unique @default(uuid()) @db.Uuid
  availabilityId String               @map("availability_id") @db.Uuid
  date           DateTime             @map("date") @db.Date
  startTime      String               @map("start_time") @db.VarChar(255)
  endTime        String               @map("end_time") @db.VarChar(255)
  start          DateTime             @map("start") @db.Timestamptz(6)
  end            DateTime             @map("end") @db.Timestamptz(6)
  timeBand       TimeBand             @map("time_band")
  createdAt      DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime             @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt      DateTime?            @map("deleted_at") @db.Timestamptz(6)
  availability   ClaimantAvailability @relation("ClaimantAvailabilitySlots", fields: [availabilityId], references: [id])

  @@map("claimant_availability_slots")
}

model ClaimantAvailabilityServices {
  id             String                           @id @unique @default(uuid()) @db.Uuid
  availabilityId String                           @map("availability_id") @db.Uuid
  type           String                           @map("type") @db.VarChar(255)
  enabled        Boolean                          @default(false) @map("enabled")
  createdAt      DateTime                         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime                         @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt      DateTime?                        @map("deleted_at") @db.Timestamptz(6)
  interpreter    ClaimantAvailabilityInterpreter? @relation("ClaimantAvailabilityInterpreter")
  availability   ClaimantAvailability             @relation("ClaimantAvailabilityServices", fields: [availabilityId], references: [id])
  transport      ClaimantAvailabilityTransport?   @relation("ClaimantAvailabilityTransport")

  @@map("claimant_availability_services")
}

model ClaimantAvailabilityInterpreter {
  id                    String                       @id @unique @default(uuid()) @db.Uuid
  availabilityServiceId String                       @unique @map("availability_service_id") @db.Uuid
  languageId            String                       @map("language_id") @db.Uuid
  createdAt             DateTime                     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime                     @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt             DateTime?                    @map("deleted_at") @db.Timestamptz(6)
  availabilityService   ClaimantAvailabilityServices @relation("ClaimantAvailabilityInterpreter", fields: [availabilityServiceId], references: [id])
  language              Language                     @relation("ClaimantAvailabilityInterpreter", fields: [languageId], references: [id])

  @@map("claimant_availability_interpreter")
}

model Language {
  id                              String                            @id @unique @default(uuid()) @db.Uuid
  name                            String                            @map("name") @db.VarChar(255)
  createdAt                       DateTime                          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                       DateTime                          @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt                       DateTime?                         @map("deleted_at") @db.Timestamptz(6)
  claimantAvailabilityInterpreter ClaimantAvailabilityInterpreter[] @relation("ClaimantAvailabilityInterpreter")

  @@map("languages")
}

model ClaimantAvailabilityTransport {
  id                    String                       @id @unique @default(uuid()) @db.Uuid
  availabilityServiceId String                       @unique @map("availability_service_id") @db.Uuid
  pickupAddressId       String?                      @map("pickup_address_id") @db.Uuid
  rawLookup             String?                      @map("raw_lookup")
  notes                 String?                      @map("notes")
  createdAt             DateTime                     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime                     @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt             DateTime?                    @map("deleted_at") @db.Timestamptz(6)
  availabilityService   ClaimantAvailabilityServices @relation("ClaimantAvailabilityTransport", fields: [availabilityServiceId], references: [id])
  pickupAddress         Address?                     @relation("ClaimantAvailabilityTransport", fields: [pickupAddressId], references: [id])

  @@map("claimant_availability_transport")
}

model CaseDocument {
  id         String    @id @unique @default(uuid()) @db.Uuid
  caseId     String    @map("case_id") @db.Uuid
  documentId String    @map("document_id") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamptz(6)
  case       Case      @relation("CaseDocuments", fields: [caseId], references: [id])
  document   Documents @relation("DocumentCases", fields: [documentId], references: [id])

  @@unique([caseId, documentId])
  @@map("case_documents")
}

model Documents {
  id        String         @id @unique @default(uuid()) @db.Uuid
  name      String         @map("name") @db.VarChar(255)
  type      String         @map("type") @db.VarChar(255)
  size      Int            @map("size")
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime?      @map("deleted_at") @db.Timestamptz(6)
  cases     CaseDocument[] @relation("DocumentCases")
  users     User[]         @relation("ProfilePhoto")

  @@map("documents")
}

model CaseType {
  id          String    @id @unique @default(uuid()) @db.Uuid
  name        String    @map("name") @db.VarChar(255)
  description String?   @map("description")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)
  cases       Case[]    @relation("CaseType")

  @@map("case_types")
}

model ExamFormat {
  id          String    @id @unique @default(uuid()) @db.Uuid
  name        String    @map("name") @db.VarChar(255)
  description String?   @map("description")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)
  cases       Case[]    @relation("ExamFormat")

  @@map("exam_formats")
}

model RequestedSpecialty {
  id          String    @id @unique @default(uuid()) @db.Uuid
  name        String    @map("name") @db.VarChar(255)
  description String?   @map("description")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)
  cases       Case[]    @relation("RequestedSpecialty")

  @@map("requested_specialties")
}

model PrismaSeed {
  id        String    @id @unique @default(uuid()) @db.Uuid
  name      String    @map("name") @db.VarChar(255)
  runAt     DateTime  @map("run_at") @db.Timestamptz(6)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  @@map("_prisma_seeds")
}

model CaseStatus {
  id          String    @id @unique @default(uuid()) @db.Uuid
  name        String    @map("name") @db.VarChar(255)
  description String?   @map("description")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(6)
  cases       Case[]    @relation("CaseStatus")

  @@map("case_statuses")
}

enum OrganizationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UrgencyLevel {
  HIGH
  MEDIUM
  LOW
}

enum CaseSecureLinkStatus {
  PENDING
  SUBMITTED
  INVALID
}

enum ClaimantPreference {
  IN_PERSON
  VIRTUAL
  EITHER
}

enum TimeBand {
  MORNING
  AFTERNOON
  EVENING
  EITHER
}
